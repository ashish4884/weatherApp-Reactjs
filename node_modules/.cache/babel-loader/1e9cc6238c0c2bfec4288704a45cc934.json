{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashis\\\\wheatheryt\\\\weatherApp-Reactjs\\\\weatherApp-Reactjs\\\\src\\\\currentLocation.js\";\nimport React from \"react\";\nimport key from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      temperatureC: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      main: undefined,\n      icon: \"CLEAR_DAY\",\n      errorMsg: undefined\n    };\n\n    this.getPosition = () => {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    };\n\n    this.getWeather = async (lat, lon) => {\n      try {\n        const response = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n        const data = await response.json();\n\n        if (data.cod !== 200) {\n          throw new Error(data.message);\n        }\n\n        this.setState({\n          lat,\n          lon,\n          city: data.name,\n          temperatureC: Math.round(data.main.temp),\n          humidity: data.main.humidity,\n          country: data.sys.country,\n          main: data.weather[0].main,\n          icon: this.getWeatherIcon(data.weather[0].main)\n        });\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n        this.setState({\n          errorMsg: \"Unable to fetch weather data.\"\n        });\n      }\n    };\n\n    this.getWeatherIcon = weatherMain => {\n      const iconMap = {\n        Haze: \"CLEAR_DAY\",\n        Clouds: \"CLOUDY\",\n        Rain: \"RAIN\",\n        Snow: \"SNOW\",\n        Dust: \"WIND\",\n        Drizzle: \"SLEET\",\n        Fog: \"FOG\",\n        Smoke: \"FOG\",\n        Tornado: \"WIND\"\n      };\n      return iconMap[weatherMain] || \"CLEAR_DAY\";\n    };\n  }\n\n  async componentDidMount() {\n    if (navigator.geolocation) {\n      try {\n        const position = await this.getPosition();\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      } catch (err) {\n        this.getWeather(28.67, 77.22); // Default location\n\n        alert(\"Location access is disabled. Showing weather for a default location.\");\n      }\n    } else {\n      alert(\"Geolocation not available.\");\n    }\n\n    this.timerID = setInterval(() => {\n      if (this.state.lat && this.state.lon) {\n        this.getWeather(this.state.lat, this.state.lon);\n      }\n    }, 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    const {\n      city,\n      country,\n      temperatureC,\n      main,\n      icon,\n      errorMsg\n    } = this.state;\n\n    if (errorMsg) {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 14\n        }\n      }, errorMsg);\n    }\n\n    return temperatureC !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, city), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, country)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n      icon: icon,\n      color: defaults.color,\n      size: defaults.size,\n      animate: defaults.animate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, main)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dmy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Clock, {\n      format: \"HH:mm:ss\",\n      interval: 1000,\n      ticking: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"temperature\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n      icon: icon,\n      weather: main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: loader,\n      alt: \"Loading...\",\n      style: {\n        width: \"50%\",\n        WebkitUserDrag: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        fontSize: \"22px\",\n        fontWeight: \"600\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \"Detecting your location...\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"white\",\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, \"Your current location will be used to fetch real-time weather data.\"));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/Users/ashis/wheatheryt/weatherApp-Reactjs/weatherApp-Reactjs/src/currentLocation.js"],"names":["React","key","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","state","lat","undefined","lon","temperatureC","city","country","humidity","main","icon","errorMsg","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","response","fetch","apiKeys","base","data","json","cod","Error","message","setState","name","Math","round","temp","sys","weather","getWeatherIcon","error","console","weatherMain","iconMap","Haze","Clouds","Rain","Snow","Dust","Drizzle","Fog","Smoke","Tornado","componentDidMount","position","coords","latitude","longitude","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport key from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport Forcast from \"./forcast\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\n\r\nconst dateBuilder = (d) => {\r\n  let months = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n  let days = [\r\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n  ];\r\n  \r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = months[d.getMonth()];\r\n  let year = d.getFullYear();\r\n\r\n  return `${day}, ${date} ${month} ${year}`;\r\n};\r\n\r\nconst defaults = {\r\n  color: \"white\",\r\n  size: 112,\r\n  animate: true,\r\n};\r\n\r\nclass Weather extends React.Component {\r\n  state = {\r\n    lat: undefined,\r\n    lon: undefined,\r\n    temperatureC: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    main: undefined,\r\n    icon: \"CLEAR_DAY\",\r\n    errorMsg: undefined,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      try {\r\n        const position = await this.getPosition();\r\n        this.getWeather(position.coords.latitude, position.coords.longitude);\r\n      } catch (err) {\r\n        this.getWeather(28.67, 77.22); // Default location\r\n        alert(\r\n          \"Location access is disabled. Showing weather for a default location.\"\r\n        );\r\n      }\r\n    } else {\r\n      alert(\"Geolocation not available.\");\r\n    }\r\n\r\n    this.timerID = setInterval(() => {\r\n      if (this.state.lat && this.state.lon) {\r\n        this.getWeather(this.state.lat, this.state.lon);\r\n      }\r\n    }, 600000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  getPosition = () => {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n  };\r\n\r\n  getWeather = async (lat, lon) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\r\n      );\r\n      const data = await response.json();\r\n\r\n      if (data.cod !== 200) {\r\n        throw new Error(data.message);\r\n      }\r\n\r\n      this.setState({\r\n        lat,\r\n        lon,\r\n        city: data.name,\r\n        temperatureC: Math.round(data.main.temp),\r\n        humidity: data.main.humidity,\r\n        country: data.sys.country,\r\n        main: data.weather[0].main,\r\n        icon: this.getWeatherIcon(data.weather[0].main),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n      this.setState({ errorMsg: \"Unable to fetch weather data.\" });\r\n    }\r\n  };\r\n\r\n  getWeatherIcon = (weatherMain) => {\r\n    const iconMap = {\r\n      Haze: \"CLEAR_DAY\",\r\n      Clouds: \"CLOUDY\",\r\n      Rain: \"RAIN\",\r\n      Snow: \"SNOW\",\r\n      Dust: \"WIND\",\r\n      Drizzle: \"SLEET\",\r\n      Fog: \"FOG\",\r\n      Smoke: \"FOG\",\r\n      Tornado: \"WIND\",\r\n    };\r\n    return iconMap[weatherMain] || \"CLEAR_DAY\";\r\n  };\r\n\r\n  render() {\r\n    const { city, country, temperatureC, main, icon, errorMsg } = this.state;\r\n\r\n    if (errorMsg) {\r\n      return <h3 style={{ color: \"white\" }}>{errorMsg}</h3>;\r\n    }\r\n\r\n    return temperatureC !== undefined ? (\r\n      <React.Fragment>\r\n        <div className=\"city\">\r\n          <div className=\"title\">\r\n            <h2>{city}</h2>\r\n            <h3>{country}</h3>\r\n          </div>\r\n          <div className=\"mb-icon\">\r\n            <ReactAnimatedWeather\r\n              icon={icon}\r\n              color={defaults.color}\r\n              size={defaults.size}\r\n              animate={defaults.animate}\r\n            />\r\n            <p>{main}</p>\r\n          </div>\r\n          <div className=\"date-time\">\r\n            <div className=\"dmy\">\r\n              <div className=\"current-time\">\r\n                <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n              </div>\r\n              <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"temperature\">\r\n              <p>{temperatureC}°<span>C</span></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Forcast icon={icon} weather={main} />\r\n      </React.Fragment>\r\n    ) : (\r\n      <React.Fragment>\r\n        <img src={loader} alt=\"Loading...\" style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\r\n        <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n          Detecting your location...\r\n        </h3>\r\n        <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n          Your current location will be used to fetch real-time weather data.\r\n        </h3>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}